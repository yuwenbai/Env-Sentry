{"version":3,"sources":["logo.svg","BBB.js","AAA.js","App.js","reportWebVitals.js","RSentry.js","index.js"],"names":["BBB","console","log","useEffect","className","AAA","props","map","item","index","ref","fres","ForWardedComponent","fref","React","forwardRef","App","AAAHandler","useRef","process","useState","name","status","array","onClick","current","data","activefocus","a","length","video","document","getElementById","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","id","style","width","height","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","hasInit","RSentry","initself","captureErrors","captureMessage","window","Sentry","dsn","integrations","Integrations","BrowserTracing","release","tracesSampleRate","ReactDOM","render","StrictMode"],"mappings":"gSAAe,I,wBCSAA,EAPH,WAKR,OAJAC,QAAQC,IAAI,iBACZC,qBAAU,WACNF,QAAQC,IAAI,sBACd,IACK,qBAAKE,UAAU,UAAf,oBCUIC,EAbH,SAACC,GAKT,OAAO,sBAAKF,UAAU,UAAf,iBADO,CAAC,GAEJG,KAAI,SAACC,EAAMC,GACd,OAAO,cAAC,EAAD,CAAKC,IAAKJ,EAAMK,UAG3B,cAACC,EAAD,CAAoBF,IAAKJ,EAAMO,WAKjCD,EAAqBE,IAAMC,YAAW,SAACT,EAAOI,GAChD,OAAO,uBAAOA,IAAKA,OC2FRM,MAzGf,WACE,IAAMC,EAAaC,mBAEnBjB,QAAQC,IAAI,eAAgBiB,4BAHf,MAIaC,mBAAS,CACjC,CAAEC,KAAM,IAAKC,QAAQ,GACrB,CAAED,KAAM,IAAKC,QAAQ,KANV,mBAINC,EAJM,KAmFb,OAnFa,KAQQL,iBAAO,MAO5Bf,qBAAU,eAqER,sBAAKC,UAAU,MAAf,UACE,qBAAKoB,QAlEY,WACnBvB,QAAQC,IAAI,qBAAsBe,GAClChB,QAAQC,IAAI,qBAAsBe,EAAWQ,SAC7C,IAAMC,EAAO,CAAC,EAAG,EAAG,GACpBT,EAAWQ,QAAQE,cACnB,IAAIC,EAAIF,EAAK,GAAKA,EAAKA,EAAKG,QAC5B5B,QAAQC,IAAI,uBAAwB0B,IA4DlC,sCAEA,sEACA,qBAAKJ,QA9Cc,WAYrB,IAAMM,EAAQC,SAASC,eAAe,SACtC,GAAGF,EAAO,CACR7B,QAAQC,IAAI,wBAKZ+B,UAAUC,aAAaC,aAJJ,CACjBL,OAAO,EACPM,OAAO,IAEuCC,MAAK,SAACC,GACpDR,EAAMS,UAAYD,EAClBR,EAAMU,eAGRvC,QAAQC,IAAI,6BAsBZ,4CACA,cAAC,EAAD,CAAKW,KAAMI,IAGX,uBAAOwB,GAAG,QAAQC,MAAO,CAACC,MAAM,QAASC,OAAO,WAE/CrB,EAAMhB,KAAI,SAACC,GACV,OAAOA,EAAKc,OACV,qBAAKoB,MAAO,CAAEG,MAAO,QAArB,SAAgCrC,EAAKa,OAErC,qBAAKqB,MAAO,CAAEG,MAAO,OAArB,SAA+BrC,EAAKa,cC5F/ByB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wBCPVO,GAAU,EAeCC,EAdC,CAEZC,SAAU,WACNvD,QAAQC,IAAI,cAAcoD,IAE9BG,cAAe,WACXH,GAAU,EACVrD,QAAQC,IAAI,kBAAmBoD,IAEnCI,eAAgB,WACZJ,GAAU,EACVrD,QAAQC,IAAI,mBAAoBoD,KCJxCC,EAAQC,WACRvD,QAAQC,IAAI,eAAgBqD,GAC5BI,OAAOJ,QAAUA,EACjBtD,QAAQC,IAAI,sBAAuByD,OAAOJ,SAC1CK,IAAY,CACVC,IAAK,4EACLC,aAAc,CAAC,IAAIC,IAAaC,gBAChCC,QAAS,cAITC,iBAAkB,IAEpBP,OAAOC,OAASA,EAChBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAM1Bc,M","file":"static/js/main.7e8bf42e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect } from 'react'\nimport './BBB.css'\nconst BBB = () => {\n    console.log(' BBB  change ')\n    useEffect(()=>{\n        console.log(' BBB  construct ')\n    },[])\n    return <div className=\"testbbb\"> bbb </div>\n}\nexport default BBB","import React from 'react'\nimport './AAA.css'\nimport BBB from './BBB'\n\nconst AAA = (props) => {\n    // const AAATest = () => {\n    //     console.log(' AAA Test')\n    // }\n    const array = [1]\n    return <div className=\"testaaa\" > AAA \n        {array.map((item, index) => {\n            return <BBB ref={props.fres}/>\n        })}\n        {/* <input ref={ref}></input> */}\n        <ForWardedComponent ref={props.fref}/>\n    </div>\n}\nexport default AAA\n\nconst ForWardedComponent = React.forwardRef((props, ref) => {\n    return <input ref={ref}></input>\n})","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport AAA from \"./AAA\";\nimport BBB from \"./BBB\";\nimport { useState, useEffect, useRef } from \"react\";\n// import * as Sentry from \"@sentry/react\";\nfunction App() {\n  const AAAHandler = useRef();\n  const data = [];\n  console.log(\"test env is \", process.env.REACT_APP_API_SERVER);\n  const [array, setArray] = useState([\n    { name: \"1\", status: true },\n    { name: \"2\", status: true },\n  ]);\n  const eventHandler = useRef(null);\n  const testA = () => {\n    console.log(\"testA\");\n  };\n  const testB = () => {\n    console.log(\"testB\");\n  };\n  useEffect(() => {\n    // eventHandler[1001] = testA\n    // eventHandler[1002] = testB\n  });\n  const addsomething = () => {\n    console.log(\" ref handler test \", AAAHandler);\n    console.log(\" ref handler test \", AAAHandler.current);\n    const data = [1, 2, 3];\n    AAAHandler.current.activefocus();\n    let a = data[0] + data[data.length];\n    console.log(\" ref handler test a \", a);\n    let b = a + 1000;\n    // console.log(' test add something data ',data[0].avatar)\n\n    // debugger\n    // window.Sentry.captureException('4.0.1的新增')\n    // console.log(' window.RSentry ', window.RSentry)\n    // window.RSentry.captureErrors()\n    // eventHandler[1001]()\n    // setArray(\n    //   [\n    //     ...array,\n    //     {name:'new', status: false}\n    //   ]\n    // )\n  };\n\n  const grabDeviceList = () => {\n    // const constrains = {\n    //   video: true,\n    //   audio: true\n    //  }\n    // navigator.mediaDevices.getUserMedia(constrains)\n    //  .then(stream => {\n    //   console.log('得到stream的类型是MediaStream')\n    //  })\n\n    // const video = document.createElement(\"video\");\n    //document.body.appendChild(video)\n    const video = document.getElementById('video')\n    if(video) {\n      console.log('get element video ok')\n      const constrains = {\n        video: true,\n        audio: true,\n      };\n      navigator.mediaDevices.getUserMedia(constrains).then((stream) => {\n        video.srcObject = stream;\n        video.play();\n      });\n    } else {\n      console.log('get element video failed')\n    }\n\n\n    // debugger\n    // window.Sentry.captureMessage('Something went wrong');\n    // window.RSentry.captureMessage()\n    // eventHandler[1002]()\n    // array.map(item => {\n    //   if(item.name === '1'){\n    //     item.status = false\n    //   }\n    // })\n    // console.log(' array is ',array)\n    // setArray([].concat(array))\n  };\n\n  return (\n    <div className=\"App\">\n      <div onClick={addsomething}>点我报错</div>\n      {/* <div onClick={changesomething}>点我改变</div> */}\n      <div>-=================================-</div>\n      <div onClick={grabDeviceList}>拉取摄像头</div>\n      <AAA fref={AAAHandler} />\n      {/* <BBB/> */}\n\n      <video id=\"video\" style={{width:'100px', height:'100px'}}/>\n\n      {array.map((item) => {\n        return item.status ? (\n          <div style={{ color: \"blue\" }}>{item.name}</div>\n        ) : (\n          <div style={{ color: \"red\" }}>{item.name}</div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let hasInit = false;\nconst RSentry = {\n\n    initself: function(){\n        console.log(' init self ',hasInit)\n    },\n    captureErrors: () => {\n        hasInit = true\n        console.log(' captureErrors ', hasInit)\n    },\n    captureMessage: () => {\n        hasInit = false\n        console.log(' captureMessage ', hasInit)\n    }\n}\nexport default RSentry","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport RSentry  from './RSentry'\nRSentry.initself()\nconsole.log(' RSentry is ', RSentry)\nwindow.RSentry = RSentry\nconsole.log(' window.RSentry is ', window.RSentry)\nSentry.init({\n  dsn: \"https://2e863aaa12c24e5fa284cd9b0acd820a@o290113.ingest.sentry.io/5735747\",\n  integrations: [new Integrations.BrowserTracing()],\n  release: \"react@4.0.2\",\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\nwindow.Sentry = Sentry\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}